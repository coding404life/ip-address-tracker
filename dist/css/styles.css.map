{"version":3,"sources":["base/_global.scss","abstracts/_variables.scss","../node_modules/rfs/scss.scss","abstracts/_mixins.scss","base/_typography.scss","components/_navigation.scss"],"names":[],"mappings":"AACA,KACI,sBAAuB,CAG3B,KACI,sBCGY,CDFZ,eCSM,CDRN,uCAAiC,CAAjC,+BAAiC,CAIrC,eEmPQ,gCAf6B,CFlOjC,yBAA0B,CE+E1B,0BFjFJ,eE0PQ,gBAlF6B,CFjKpC,CGDO,yBHNR,eAKQ,iBAAkB,CAEzB,CAED,IAGI,iEAAuF,CACvF,kDAAmD,CAAnD,0CAAmD,CACnD,iBAAkB,CAClB,UAAW,CACX,UAAW,CACX,WAAY,CACZ,YAAa,CACb,WAAY,CItBhB,oBAHI,sBHWQ,CGRZ,EAEI,eHMQ,CIjBZ,kBAEQ,eAAgB,CAChB,wBAAyB,CAHjC,YAOQ,qBAA6B,CAE7B,iBAAkB,CAT1B,cAaQ,eAAiB,CACjB,yBAA0B,CAdlC,oBAiBY,qBAA6B,CAjBzC,kBAsBQ,SAAU,CAtBlB,wBAyBY,kBJpBK,CIqBL,iDAA8C,CAA9C,yCAA8C,CFRlD,yBElBR,eAiCY,eAAgB,CAChB,iBAAkB,CAlC9B,kBAsCY,eAAgB,CACnB","file":"styles.css","sourcesContent":["//body styls\r\nhtml {\r\n    scroll-behavior: smooth;\r\n}\r\n\r\nbody {\r\n    font-family: $sans;\r\n    font-weight: $light;\r\n    transition: all ease-in-out 250ms;\r\n}\r\n\r\n// global classes\r\n.muted-heading {\r\n    @include font-size(40px);\r\n    text-transform: capitalize;\r\n\r\n    @include mediaMax(769px) {\r\n        margin-bottom: 1em;\r\n    }\r\n}\r\n\r\n.bg {\r\n    background-image: -moz-linear-gradient(0deg, rgb(45, 3, 151) 0%, rgb(249, 98, 169) 100%);\r\n    background-image: -webkit-linear-gradient(0deg, rgb(45, 3, 151) 0%, rgb(249, 98, 169) 100%);\r\n    background-image: -ms-linear-gradient(0deg, rgb(45, 3, 151) 0%, rgb(249, 98, 169) 100%);\r\n    box-shadow: 0px 8px 16px 0px rgba(55, 8, 152, 0.06);\r\n    position: absolute;\r\n    left: 520px;\r\n    top: 1204px;\r\n    width: 350px;\r\n    height: 432px;\r\n    z-index: 153;\r\n}","//colors\r\n$whiteColor:#fff;\r\n$transWhiteColor:rgba(250, 250, 250, .4);\r\n$blackColor:#191919;\r\n$grayColor:#666;\r\n$greenColor:green;\r\n\r\n\r\n//Fonts\r\n$sans:sans-serif;\r\n$gentiumFont: 'Gentium Book Basic',\r\nserif;\r\n$openSansFont:'Open Sans',\r\nsans-serif;\r\n\r\n//weight\r\n$light:300;\r\n$regular:400;\r\n$bold:500;","// stylelint-disable property-blacklist, scss/dollar-variable-default\n\n// SCSS RFS mixin\n//\n// Automated responsive values for font sizes, paddings, margins and much more\n//\n// Licensed under MIT (https://github.com/twbs/rfs/blob/master/LICENSE)\n\n// Configuration\n\n// Base value\n$rfs-base-value: 1.25rem !default;\n$rfs-unit: rem !default;\n\n@if $rfs-unit != rem and $rfs-unit != px {\n  @error \"`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.\";\n}\n\n// Breakpoint at where values start decreasing if screen width is smaller\n$rfs-breakpoint: 1200px !default;\n$rfs-breakpoint-unit: px !default;\n\n@if $rfs-breakpoint-unit != px and $rfs-breakpoint-unit != em and $rfs-breakpoint-unit != rem {\n  @error \"`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.\";\n}\n\n// Resize values based on screen height and width\n$rfs-two-dimensional: false !default;\n\n// Factor of decrease\n$rfs-factor: 10 !default;\n\n@if type-of($rfs-factor) != number or $rfs-factor <= 1 {\n  @error \"`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.\";\n}\n\n// Mode. Possibilities: \"min-media-query\", \"max-media-query\"\n$rfs-mode: min-media-query !default;\n\n// Generate enable or disable classes. Possibilities: false, \"enable\" or \"disable\"\n$rfs-class: false !default;\n\n// 1 rem = $rfs-rem-value px\n$rfs-rem-value: 16 !default;\n\n// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14\n$rfs-safari-iframe-resize-bug-fix: false !default;\n\n// Disable RFS by setting $enable-rfs to false\n$enable-rfs: true !default;\n\n// Cache $rfs-base-value unit\n$rfs-base-value-unit: unit($rfs-base-value);\n\n// Remove px-unit from $rfs-base-value for calculations\n@if $rfs-base-value-unit == px {\n  $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1);\n}\n@else if $rfs-base-value-unit == rem {\n  $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1 / $rfs-rem-value);\n}\n\n// Cache $rfs-breakpoint unit to prevent multiple calls\n$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);\n\n// Remove unit from $rfs-breakpoint for calculations\n@if $rfs-breakpoint-unit-cache == px {\n  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1);\n}\n@else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == \"em\" {\n  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1 / $rfs-rem-value);\n}\n\n// Calculate the media query value\n$rfs-mq-value: if($rfs-breakpoint-unit == px, #{$rfs-breakpoint}px, #{$rfs-breakpoint / $rfs-rem-value}#{$rfs-breakpoint-unit});\n$rfs-mq-property-width: if($rfs-mode == max-media-query, max-width, min-width);\n$rfs-mq-property-height: if($rfs-mode == max-media-query, max-height, min-height);\n\n// Internal mixin used to determine which media query needs to be used\n@mixin _rfs-media-query {\n  @if $rfs-two-dimensional {\n    @if $rfs-mode == max-media-query {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}), (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n    @else {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) and (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n  }\n  @else {\n    @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {\n      @content;\n    }\n  }\n}\n\n// Internal mixin that adds disable classes to the selector if needed.\n@mixin _rfs-rule {\n  @if $rfs-class == disable and $rfs-mode == max-media-query {\n    // Adding an extra class increases specificity, which prevents the media query to override the property\n    &,\n    .disable-rfs &,\n    &.disable-rfs {\n      @content;\n    }\n  }\n  @else if $rfs-class == enable and $rfs-mode == min-media-query {\n    .enable-rfs &,\n    &.enable-rfs {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n// Internal mixin that adds enable classes to the selector if needed.\n@mixin _rfs-media-query-rule {\n\n  @if $rfs-class == enable {\n    @if $rfs-mode == min-media-query {\n      @content;\n    }\n\n    @include _rfs-media-query {\n      .enable-rfs &,\n      &.enable-rfs {\n        @content;\n      }\n    }\n  }\n  @else {\n    @if $rfs-class == disable and $rfs-mode == min-media-query {\n      .disable-rfs &,\n      &.disable-rfs {\n        @content;\n      }\n    }\n    @include _rfs-media-query {\n      @content;\n    }\n  }\n}\n\n// Helper function to get the formatted non-responsive value\n@function rfs-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: '';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + ' 0';\n    }\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      @if $unit == px {\n        // Convert to rem if needed\n        $val: $val + ' ' + if($rfs-unit == rem, #{$value / ($value * 0 + $rfs-rem-value)}rem, $value);\n      }\n      @else if $unit == rem {\n        // Convert to px if needed\n        $val: $val + ' ' + if($rfs-unit == px, #{$value / ($value * 0 + 1) * $rfs-rem-value}px, $value);\n      }\n      @else {\n        // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n        $val: $val + ' ' + $value;\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// Helper function to get the responsive value calculated by RFS\n@function rfs-fluid-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: '';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + ' 0';\n    }\n\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n      @if not $unit or $unit != px and $unit != rem {\n        $val: $val + ' ' + $value;\n      }\n\n      @else {\n        // Remove unit from $value for calculations\n        $value: $value / ($value * 0 + if($unit == px, 1, 1 / $rfs-rem-value));\n\n        // Only add the media query if the value is greater than the minimum value\n        @if abs($value) <= $rfs-base-value or not $enable-rfs {\n          $val: $val + ' ' +  if($rfs-unit == rem, #{$value / $rfs-rem-value}rem, #{$value}px);\n        }\n        @else {\n          // Calculate the minimum value\n          $value-min: $rfs-base-value + (abs($value) - $rfs-base-value) / $rfs-factor;\n\n          // Calculate difference between $value and the minimum value\n          $value-diff: abs($value) - $value-min;\n\n          // Base value formatting\n          $min-width: if($rfs-unit == rem, #{$value-min / $rfs-rem-value}rem, #{$value-min}px);\n\n          // Use negative value if needed\n          $min-width: if($value < 0, -$min-width, $min-width);\n\n          // Use `vmin` if two-dimensional is enabled\n          $variable-unit: if($rfs-two-dimensional, vmin, vw);\n\n          // Calculate the variable width between 0 and $rfs-breakpoint\n          $variable-width: #{$value-diff * 100 / $rfs-breakpoint}#{$variable-unit};\n\n          // Return the calculated value\n          $val: $val + ' calc(' + $min-width + if($value < 0, ' - ', ' + ') + $variable-width + ')';\n        }\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// RFS mixin\n@mixin rfs($values, $property: font-size) {\n  @if $values != null {\n    $val: rfs-value($values);\n    $fluidVal: rfs-fluid-value($values);\n\n    // Do not print the media query if responsive & non-responsive values are the same\n    @if $val == $fluidVal {\n      #{$property}: $val;\n    }\n    @else {\n      @include _rfs-rule {\n        #{$property}: if($rfs-mode == max-media-query, $val, $fluidVal);\n\n        // Include safari iframe resize fix if needed\n        min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);\n      }\n\n      @include _rfs-media-query-rule {\n        #{$property}: if($rfs-mode == max-media-query, $fluidVal, $val);\n      }\n    }\n  }\n}\n\n// Shorthand helper mixins\n@mixin font-size($value) {\n  @include rfs($value);\n}\n\n@mixin padding($value) {\n  @include rfs($value, padding);\n}\n\n@mixin padding-top($value) {\n  @include rfs($value, padding-top);\n}\n\n@mixin padding-right($value) {\n  @include rfs($value, padding-right);\n}\n\n@mixin padding-bottom($value) {\n  @include rfs($value, padding-bottom);\n}\n\n@mixin padding-left($value) {\n  @include rfs($value, padding-left);\n}\n\n@mixin margin($value) {\n  @include rfs($value, margin);\n}\n\n@mixin margin-top($value) {\n  @include rfs($value, margin-top);\n}\n\n@mixin margin-right($value) {\n  @include rfs($value, margin-right);\n}\n\n@mixin margin-bottom($value) {\n  @include rfs($value, margin-bottom);\n}\n\n@mixin margin-left($value) {\n  @include rfs($value, margin-left);\n}\n","//mixin media query from high to low\r\n@mixin mediaMin($arg...) {\r\n    @if length($arg)==1 {\r\n        @media(min-width: nth($arg, 1)) {\r\n            @content;\r\n        }\r\n    }\r\n\r\n    @if length($arg)==2 {\r\n        @media(min-width:nth($arg, 1)) and (max-width: nth($arg, 2)) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n//mixin media query form low to high\r\n@mixin mediaMax($arg...) {\r\n    @if length($arg)==1 {\r\n        @media(max-width: nth($arg, 1)) {\r\n            @content;\r\n        }\r\n    }\r\n\r\n    @if length($arg)==2 {\r\n        @media(max-width:nth($arg, 1)) and (min-width: nth($arg, 2)) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n//crossbrowser mixin\r\n@mixin css3-prefix($property, $value) {\r\n    -webkit-#{$property}: #{$value};\r\n    -khtml-#{$property}: #{$value};\r\n    -moz-#{$property}: #{$value};\r\n    -ms-#{$property}: #{$value};\r\n    -o-#{$property}: #{$value};\r\n    #{$property}: #{$value};\r\n}","h1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n    font-family: $sans;\r\n}\r\n\r\np {\r\n    font-family: $sans;\r\n    font-weight: $regular;\r\n}","nav {\r\n    .navbar-brand {\r\n        font-size: 1.4em;\r\n        text-transform: uppercase;\r\n    }\r\n\r\n    .active {\r\n        color: $greenColor !important;\r\n        // border: 1px solid $greenColor;\r\n        border-radius: 7px;\r\n    }\r\n\r\n    .nav-link {\r\n        font-weight: bold;\r\n        text-transform: capitalize;\r\n\r\n        &:hover {\r\n            color: $greenColor !important;\r\n        }\r\n    }\r\n\r\n    .form-control {\r\n        width: 82%;\r\n\r\n        &:focus {\r\n            border-color: $greenColor;\r\n            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, .5);\r\n        }\r\n    }\r\n\r\n\r\n    @include mediaMax(769px) {\r\n        #navbarNav {\r\n            margin-top: 10px;\r\n            text-align: center;\r\n        }\r\n\r\n        .navbar-brand {\r\n            font-size: 1.2em;\r\n        }\r\n    }\r\n}"]}