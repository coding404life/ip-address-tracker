{"version":3,"sources":["base/_global.scss","abstracts/_variables.scss","../node_modules/rfs/scss.scss","abstracts/_mixins.scss","base/_typography.scss","pages/_home.scss"],"names":[],"mappings":"AACA,KACI,sBAAuB,CAG3B,KACI,4BCQM,CDPN,eCUM,CDTN,uCAAiC,CAAjC,+BAAiC,CAIrC,eEmPQ,gCAf6B,CFlOjC,yBAA0B,CE+E1B,0BFjFJ,eE0PQ,gBAlF6B,CFjKpC,CGDO,yBHNR,eAKQ,iBAAkB,CAEzB,CGDO,yBHGR,cAGQ,2BAA6B,CAEpC,CIjBD,oBAHI,sBHYQ,CGTZ,EAEI,eHOQ,CIlBZ,OACI,8CAAiD,CACjD,uBAA2B,CAC3B,qBAAsB,CACtB,2BAA4B,CAC5B,mBAAoB,CACpB,gBAAiB,CANrB,cASQ,UJRQ,CISR,yBAA0B,CAVlC,kBAcQ,mBAAoB,CACpB,2BAA4B,CAfpC,mBAmBQ,2BAA4B,CAC5B,gBAAiB,CACjB,wBJnBW,CI0BnB,SACI,WAAY,CACZ,gBAAiB,CACjB,iBAAkB,CAClB,SAAU,CACV,MAAO,CACP,OAAQ,CFhBJ,yBEUR,SASQ,QAAS,CACT,eAAgB,CAqCvB,CA/CD,cAcQ,qBJzCQ,CI0CR,kBAAmB,CACnB,mBAAa,CAAb,mBAAa,CAAb,YAAa,CACb,uBAAuB,CAAvB,oBAAuB,CAAvB,sBAAuB,CACvB,wBAAmB,CAAnB,qBAAmB,CAAnB,kBAAmB,CACnB,mBAAoB,CACpB,oCAA+B,CAA/B,4BAA+B,CF9B/B,yBEUR,cAuBY,iBAAkB,CAClB,cAAe,CAxB3B,gBA2BgB,mBAAoB,CACpB,eAAgB,CACnB,CA7Bb,WAkCQ,wBAAyB,CACzB,aAAc,CACd,4BJlDE,CImDF,eAAgB,CArCxB,YHmOQ,gCAf6B,CAnJjC,0BGjEJ,YH0OQ,gBAlF6B,CG1GhC,CFxDG,yBEUR,YH+NM,gBAvE+B,CG1GhC,CAKL,YAEQ,WAAY,CACZ,SAAU,CF/EV,0BE4ER,YAMY,WAAY,CAEnB","file":"styles.css","sourcesContent":["//body styls\nhtml {\n    scroll-behavior: smooth;\n}\n\nbody {\n    font-family: $rubikFont;\n    font-weight: $light;\n    transition: all ease-in-out 250ms;\n}\n\n// global classes\n.muted-heading {\n    @include font-size(40px);\n    text-transform: capitalize;\n\n    @include mediaMax(769px) {\n        margin-bottom: 1em;\n    }\n}\n\n.border-right {\n\n    @include mediaMax(992px) {\n        border-right: none !important;\n    }\n}","//colors\n$whiteColor:#fff;\n$blackColor:#191919;\n$grayColor:#666;\n$VeryDarkGray: hsl(0, 0%, 17%);\n$DarkGray: hsl(0, 0%, 59%);\n\n//Fonts\n$sans:sans-serif;\n$gentiumFont: 'Gentium Book Basic',\nserif;\n$openSansFont:'Open Sans',\nsans-serif;\n$rubikFont:'Rubik',\nsans-serif;\n\n//weight\n$light:300;\n$regular:400;\n$bold:500;","// stylelint-disable property-blacklist, scss/dollar-variable-default\n\n// SCSS RFS mixin\n//\n// Automated responsive values for font sizes, paddings, margins and much more\n//\n// Licensed under MIT (https://github.com/twbs/rfs/blob/master/LICENSE)\n\n// Configuration\n\n// Base value\n$rfs-base-value: 1.25rem !default;\n$rfs-unit: rem !default;\n\n@if $rfs-unit != rem and $rfs-unit != px {\n  @error \"`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.\";\n}\n\n// Breakpoint at where values start decreasing if screen width is smaller\n$rfs-breakpoint: 1200px !default;\n$rfs-breakpoint-unit: px !default;\n\n@if $rfs-breakpoint-unit != px and $rfs-breakpoint-unit != em and $rfs-breakpoint-unit != rem {\n  @error \"`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.\";\n}\n\n// Resize values based on screen height and width\n$rfs-two-dimensional: false !default;\n\n// Factor of decrease\n$rfs-factor: 10 !default;\n\n@if type-of($rfs-factor) != number or $rfs-factor <= 1 {\n  @error \"`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.\";\n}\n\n// Mode. Possibilities: \"min-media-query\", \"max-media-query\"\n$rfs-mode: min-media-query !default;\n\n// Generate enable or disable classes. Possibilities: false, \"enable\" or \"disable\"\n$rfs-class: false !default;\n\n// 1 rem = $rfs-rem-value px\n$rfs-rem-value: 16 !default;\n\n// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14\n$rfs-safari-iframe-resize-bug-fix: false !default;\n\n// Disable RFS by setting $enable-rfs to false\n$enable-rfs: true !default;\n\n// Cache $rfs-base-value unit\n$rfs-base-value-unit: unit($rfs-base-value);\n\n// Remove px-unit from $rfs-base-value for calculations\n@if $rfs-base-value-unit == px {\n  $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1);\n}\n@else if $rfs-base-value-unit == rem {\n  $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1 / $rfs-rem-value);\n}\n\n// Cache $rfs-breakpoint unit to prevent multiple calls\n$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);\n\n// Remove unit from $rfs-breakpoint for calculations\n@if $rfs-breakpoint-unit-cache == px {\n  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1);\n}\n@else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == \"em\" {\n  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1 / $rfs-rem-value);\n}\n\n// Calculate the media query value\n$rfs-mq-value: if($rfs-breakpoint-unit == px, #{$rfs-breakpoint}px, #{$rfs-breakpoint / $rfs-rem-value}#{$rfs-breakpoint-unit});\n$rfs-mq-property-width: if($rfs-mode == max-media-query, max-width, min-width);\n$rfs-mq-property-height: if($rfs-mode == max-media-query, max-height, min-height);\n\n// Internal mixin used to determine which media query needs to be used\n@mixin _rfs-media-query {\n  @if $rfs-two-dimensional {\n    @if $rfs-mode == max-media-query {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}), (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n    @else {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) and (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n  }\n  @else {\n    @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {\n      @content;\n    }\n  }\n}\n\n// Internal mixin that adds disable classes to the selector if needed.\n@mixin _rfs-rule {\n  @if $rfs-class == disable and $rfs-mode == max-media-query {\n    // Adding an extra class increases specificity, which prevents the media query to override the property\n    &,\n    .disable-rfs &,\n    &.disable-rfs {\n      @content;\n    }\n  }\n  @else if $rfs-class == enable and $rfs-mode == min-media-query {\n    .enable-rfs &,\n    &.enable-rfs {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n// Internal mixin that adds enable classes to the selector if needed.\n@mixin _rfs-media-query-rule {\n\n  @if $rfs-class == enable {\n    @if $rfs-mode == min-media-query {\n      @content;\n    }\n\n    @include _rfs-media-query {\n      .enable-rfs &,\n      &.enable-rfs {\n        @content;\n      }\n    }\n  }\n  @else {\n    @if $rfs-class == disable and $rfs-mode == min-media-query {\n      .disable-rfs &,\n      &.disable-rfs {\n        @content;\n      }\n    }\n    @include _rfs-media-query {\n      @content;\n    }\n  }\n}\n\n// Helper function to get the formatted non-responsive value\n@function rfs-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: '';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + ' 0';\n    }\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      @if $unit == px {\n        // Convert to rem if needed\n        $val: $val + ' ' + if($rfs-unit == rem, #{$value / ($value * 0 + $rfs-rem-value)}rem, $value);\n      }\n      @else if $unit == rem {\n        // Convert to px if needed\n        $val: $val + ' ' + if($rfs-unit == px, #{$value / ($value * 0 + 1) * $rfs-rem-value}px, $value);\n      }\n      @else {\n        // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n        $val: $val + ' ' + $value;\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// Helper function to get the responsive value calculated by RFS\n@function rfs-fluid-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: '';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + ' 0';\n    }\n\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n      @if not $unit or $unit != px and $unit != rem {\n        $val: $val + ' ' + $value;\n      }\n\n      @else {\n        // Remove unit from $value for calculations\n        $value: $value / ($value * 0 + if($unit == px, 1, 1 / $rfs-rem-value));\n\n        // Only add the media query if the value is greater than the minimum value\n        @if abs($value) <= $rfs-base-value or not $enable-rfs {\n          $val: $val + ' ' +  if($rfs-unit == rem, #{$value / $rfs-rem-value}rem, #{$value}px);\n        }\n        @else {\n          // Calculate the minimum value\n          $value-min: $rfs-base-value + (abs($value) - $rfs-base-value) / $rfs-factor;\n\n          // Calculate difference between $value and the minimum value\n          $value-diff: abs($value) - $value-min;\n\n          // Base value formatting\n          $min-width: if($rfs-unit == rem, #{$value-min / $rfs-rem-value}rem, #{$value-min}px);\n\n          // Use negative value if needed\n          $min-width: if($value < 0, -$min-width, $min-width);\n\n          // Use `vmin` if two-dimensional is enabled\n          $variable-unit: if($rfs-two-dimensional, vmin, vw);\n\n          // Calculate the variable width between 0 and $rfs-breakpoint\n          $variable-width: #{$value-diff * 100 / $rfs-breakpoint}#{$variable-unit};\n\n          // Return the calculated value\n          $val: $val + ' calc(' + $min-width + if($value < 0, ' - ', ' + ') + $variable-width + ')';\n        }\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// RFS mixin\n@mixin rfs($values, $property: font-size) {\n  @if $values != null {\n    $val: rfs-value($values);\n    $fluidVal: rfs-fluid-value($values);\n\n    // Do not print the media query if responsive & non-responsive values are the same\n    @if $val == $fluidVal {\n      #{$property}: $val;\n    }\n    @else {\n      @include _rfs-rule {\n        #{$property}: if($rfs-mode == max-media-query, $val, $fluidVal);\n\n        // Include safari iframe resize fix if needed\n        min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);\n      }\n\n      @include _rfs-media-query-rule {\n        #{$property}: if($rfs-mode == max-media-query, $fluidVal, $val);\n      }\n    }\n  }\n}\n\n// Shorthand helper mixins\n@mixin font-size($value) {\n  @include rfs($value);\n}\n\n@mixin padding($value) {\n  @include rfs($value, padding);\n}\n\n@mixin padding-top($value) {\n  @include rfs($value, padding-top);\n}\n\n@mixin padding-right($value) {\n  @include rfs($value, padding-right);\n}\n\n@mixin padding-bottom($value) {\n  @include rfs($value, padding-bottom);\n}\n\n@mixin padding-left($value) {\n  @include rfs($value, padding-left);\n}\n\n@mixin margin($value) {\n  @include rfs($value, margin);\n}\n\n@mixin margin-top($value) {\n  @include rfs($value, margin-top);\n}\n\n@mixin margin-right($value) {\n  @include rfs($value, margin-right);\n}\n\n@mixin margin-bottom($value) {\n  @include rfs($value, margin-bottom);\n}\n\n@mixin margin-left($value) {\n  @include rfs($value, margin-left);\n}\n","//mixin media query from high to low\n@mixin mediaMin($arg...) {\n    @if length($arg)==1 {\n        @media(min-width: nth($arg, 1)) {\n            @content;\n        }\n    }\n\n    @if length($arg)==2 {\n        @media(min-width:nth($arg, 1)) and (max-width: nth($arg, 2)) {\n            @content;\n        }\n    }\n}\n\n//mixin media query form low to high\n@mixin mediaMax($arg...) {\n    @if length($arg)==1 {\n        @media(max-width: nth($arg, 1)) {\n            @content;\n        }\n    }\n\n    @if length($arg)==2 {\n        @media(max-width:nth($arg, 1)) and (min-width: nth($arg, 2)) {\n            @content;\n        }\n    }\n}\n\n//crossbrowser mixin\n@mixin css3-prefix($property, $value) {\n    -webkit-#{$property}: #{$value};\n    -khtml-#{$property}: #{$value};\n    -moz-#{$property}: #{$value};\n    -ms-#{$property}: #{$value};\n    -o-#{$property}: #{$value};\n    #{$property}: #{$value};\n}","h1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    font-family: $sans;\n}\n\np {\n    font-family: $sans;\n    font-weight: $regular;\n}","header {\n    background-image: url('../images/pattern-bg.png');\n    background-position: center;\n    background-size: cover;\n    background-repeat: no-repeat;\n    padding: 2rem 0 3rem;\n    min-height: 16rem;\n\n    .title {\n        color: $whiteColor;\n        text-transform: capitalize;\n    }\n\n    .search-ip {\n        padding: 1.6rem 1rem;\n        border-radius: 15px 0 0 15px;\n    }\n\n    .search-btn {\n        border-radius: 0 15px 15px 0;\n        padding: 0 1.2rem;\n        background-color: $blackColor;\n    }\n}\n\n//end header styles\n\n// start ip-info section\n#ip-info {\n    z-index: 100;\n    padding: 2rem 10%;\n    position: absolute;\n    top: 10rem;\n    left: 0;\n    right: 0;\n\n    @include mediaMax(550px) {\n        top: 8rem;\n        padding: 2rem 5%;\n    }\n\n    .box {\n        background-color: $whiteColor;\n        border-radius: 15px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 1.5rem 1rem;\n        box-shadow: 0 3px 10px 0px #ddd;\n\n        @include mediaMax(550px) {\n            text-align: center;\n            padding: 1rem 0;\n\n            p {\n                margin-bottom: .5rem;\n                font-size: .7rem;\n            }\n        }\n    }\n\n    p {\n        text-transform: uppercase;\n        color: #9c9a9a;\n        font-family: $rubikFont;\n        font-weight: 500;\n    }\n\n    h4 {\n        @include font-size(1.4rem);\n\n        @include mediaMax(550px) {\n            @include font-size(1.1rem);\n        }\n    }\n}\n\n\n//map styles\n#map {\n    #mapid {\n        height: 65vh;\n        z-index: 0;\n\n        @include mediaMin(1024px) {\n            height: 74vh;\n        }\n    }\n}"]}